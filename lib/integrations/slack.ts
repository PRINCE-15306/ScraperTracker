interface SlackMessage {
  title: string
  content: string
  timestamp: string
}

export async function sendSlackMessage(webhookUrl: string, message: SlackMessage) {
  try {
    const slackPayload = {
      text: message.title,
      blocks: [
        {
          type: "header",
          text: {
            type: "plain_text",
            text: message.title,
          },
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: message.content,
          },
        },
        {
          type: "context",
          elements: [
            {
              type: "mrkdwn",
              text: `Sent at ${new Date(message.timestamp).toLocaleString()}`,
            },
          ],
        },
      ],
    }

    const response = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(slackPayload),
    })

    if (!response.ok) {
      throw new Error(`Slack API error: ${response.status} ${response.statusText}`)
    }

    return { success: true, message: "Message sent to Slack" }
  } catch (error) {
    console.error("Slack integration error:", error)
    throw error
  }
}

export async function sendSlackSummary(webhookUrl: string, summary: any) {
  try {
    const summaryContent = summary.summary_content
    const weekStart = new Date(summary.week_start_date).toLocaleDateString()
    const weekEnd = new Date(summary.week_end_date).toLocaleDateString()

    const slackPayload = {
      text: `📊 Weekly Competitive Intelligence Summary (${weekStart} - ${weekEnd})`,
      blocks: [
        {
          type: "header",
          text: {
            type: "plain_text",
            text: `📊 Weekly Competitive Intelligence Summary`,
          },
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*Period:* ${weekStart} - ${weekEnd}`,
          },
        },
        {
          type: "section",
          fields: [
            {
              type: "mrkdwn",
              text: `*Total Changes:*\n${summaryContent.totalChanges}`,
            },
            {
              type: "mrkdwn",
              text: `*Important Changes:*\n${summaryContent.importantChanges}`,
            },
          ],
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*Executive Overview:*\n${summaryContent.overview}`,
          },
        },
      ],
    }

    // Add key insights
    if (summaryContent.keyInsights && summaryContent.keyInsights.length > 0) {
      slackPayload.blocks.push({
        type: "section",
        text: {
          type: "mrkdwn",
          text: `*🔍 Key Insights:*\n${summaryContent.keyInsights
            .slice(0, 3)
            .map((insight: any) => `• ${insight.insight}`)
            .join("\n")}`,
        },
      })
    }

    // Add top recommendations
    if (summaryContent.recommendations && summaryContent.recommendations.length > 0) {
      const highPriorityRecs = summaryContent.recommendations.filter((rec: any) => rec.priority === "high").slice(0, 3)
      if (highPriorityRecs.length > 0) {
        slackPayload.blocks.push({
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*🎯 High Priority Recommendations:*\n${highPriorityRecs
              .map((rec: any) => `• ${rec.action}`)
              .join("\n")}`,
          },
        })
      }
    }

    slackPayload.blocks.push({
      type: "context",
      elements: [
        {
          type: "mrkdwn",
          text: `Generated by CompetitorTrack • ${new Date().toLocaleString()}`,
        },
      ],
    })

    const response = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(slackPayload),
    })

    if (!response.ok) {
      throw new Error(`Slack API error: ${response.status} ${response.statusText}`)
    }

    return { success: true, message: "Summary sent to Slack" }
  } catch (error) {
    console.error("Slack summary integration error:", error)
    throw error
  }
}
